#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

#define trace(x) cerr << #x << " = " << x << endl

struct Edge{
  int next;
  long q;
};

void testcase(){
  int n,m,l;
  cin >> n >> m >> l;

  vector<vector<Edge>> G(n);
  for(int i=0;i<m;++i){
    int x,y;
    long q;
    cin >> x >> y >> q;
    G[x].push_back({y,q});
  }

  long tot=0;
  for(int i=0;i<l;++i){
    vector<long> dp(n,0);

    for(int j=n-2;j>=0;--j){
      for(Edge e : G[j]){
        dp[j] = max(dp[j],e.q+dp[e.next]);
      }
      dp[j] = max(dp[j],dp[j+1]);
    }
    
    tot += dp[0];
    int j=0;
    while(j<n-1){
      bool found=false;
      for(Edge& e : G[j]){
        if(e.q + dp[e.next] == dp[j]){
          e.q = 0;
          j = e.next;
          found=true;
          break;
        }
      }
      if(!found) ++j;
    }
  }
  cout << tot << endl;
}

int main(){
  ios_base::sync_with_stdio(false);
  int T;
  cin >> T;
  while(T--) testcase();
}
