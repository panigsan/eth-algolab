#include <iostream>
#include <cassert>
#include <vector>

using namespace std;

int solve(int,int);
int solve();

int n,m,k;

vector<int> v;
vector<int> dp;
void testcase(){
  cin >> n >> m >> k;
  v.clear();
  dp.clear();
  v.push_back(-1);
  for(int i=1;i<=n;i++){
    int vi; cin >> vi;
    v.push_back(vi);
  }

  
  for(int i=0;i<=n+1;i++){
    dp.push_back(-1);
    //dp.push_back(vector<int>(m+1,-1));
  }
  /*
  for(int i=0;i<=n;i++){
    for(int j=0;j<m;j++){
      assert(dp[i][j]==-1);
    }
  }*/

  //int res = solve(1,m);
  int res = solve();
  if(res==-1) cout << "fail" << endl;
  else        cout << res << endl;
  //cout << "--" << endl;
}

  
int solve(){
  int r = n;
  int s = v[r];

  dp[n+1]=0;
  dp[r] = 0;
  if(v[r] == k) dp[r]=1;
  while(r>=1){
    r--;
    int i = r;
    int s=v[i];
    while(s<k && i<n){
      i++;
      s+=v[i];
    }
    if(s==k){
      dp[r] = max(dp[r+1],(i-r+1)+dp[i+1]);
    }
    else {
      dp[r] = dp[r+1];
    }
  }
  return dp[1];
}
/*

int solve(int l, int a){
  //cout << "l: " << l << " a: " << a << endl;
  if(a==0) return 0;
  if(l==n+1) return -1;
  if(dp[l]!=-1) cout << "II" << endl;
  if(dp[l] != -1) return min(a,dp[l]); //cout << "l: " << l << " a " << a << endl;
  //if(l==n && v[n]==k) return 1;

  int best = -1;
  int border=l;
  int i=l;
  int s = v[i];
  while(border<=i && i<=n){

    //cout << "K" << k << endl;
    while(s!=k && i<=n && border<=i){
      while(s<k && i<n){
        i++;
        s+=v[i];
      }
      if(i==n && s<k) break;
      while(s>k){
        if(border==i){
          i++;
          border++;
          s=v[i];
        }else{
       //cout << "C" << endl;
       //cout << i << " " << border << " " << s << endl;
          s-=v[border];
          border++;
        }
      }
      if(dp[i]!=-1) return max(best,dp[i]);
      //cout << i << endl;
      //cout << border << endl;
    }
ski:
    if(border>i) cout << "B" << endl;
    *
    while(s<k && i<n){
      i++;
      s += v[i];
    }*
    if(s==k){
      //cout << "A" << endl;
      //cout << "- l: " << l << " a: " << a << " i: " << i << endl;
      int res = solve(i+1,a-1);
      if(res!=-1){
        best = max(best,(i-border+1) +res);
      }
    }
    i++;
    s+=v[i];
  }
  dp[l] = best;

  //cout << "l: " << l << " a: " << a << " best: " << best << endl;
  return best;
}
*/

int main(){
  int t; cin >> t;
  for(int i=0;i<t;i++) testcase();
}
